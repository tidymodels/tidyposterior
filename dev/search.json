[{"path":[]},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/ISSUE_TEMPLATE.html","id":"minimal-reproducible-example","dir":"","previous_headings":"","what":"Minimal, reproducible example:","title":"NA","text":"Please read page: reprex = {repr}oducible {ex}ample Text example code modified R FAQ stackoverflow","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/ISSUE_TEMPLATE.html","id":"minimal-reproducible-dataset","dir":"","previous_headings":"Minimal, reproducible example:","what":"Minimal Reproducible Dataset:","title":"NA","text":"using data set package use e.g. dput() give us something can put R immediately, e.g.  Without dataset, usually isn’t much can help. data frame factor many levels, dput output can unwieldy still list possible factor levels even aren’t present subset data. solve issue, can use droplevels() function. Notice species factor one level: dput(droplevels(head(iris, 4))).","code":"dput(head(iris,4))"},{"path":"https://tidyposterior.tidymodels.org/dev/ISSUE_TEMPLATE.html","id":"minimal-runnable-code","dir":"","previous_headings":"Minimal, reproducible example:","what":"Minimal, runnable code:","title":"NA","text":"","code":"library(tidyposterior) library(dplyr)  data(precise_example)  accuracy <- precise_example |> select(id, contains(\"Accuracy\")) accuracy <- setNames(accuracy, tolower(gsub(\"_Accuracy$\", \"\", names(accuracy))))  accuracy  acc_model <- perf_mod(accuracy, seed = 13311, verbose = FALSE)"},{"path":"https://tidyposterior.tidymodels.org/dev/ISSUE_TEMPLATE.html","id":"session-info","dir":"","previous_headings":"","what":"Session Info:","title":"NA","text":"sure test chunks code empty R session submitting issue!","code":"sessionInfo()  # or sessioninfo::session_info()"},{"path":"https://tidyposterior.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tidyposterior authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/articles/Getting_Started.html","id":"comparing-modelingprepreocessing-methods","dir":"Articles","previous_headings":"","what":"Comparing modeling/prepreocessing methods","title":"Getting Started","text":"One way incorporate nonlinearity class boundary use spline basis expansion predictors. recipe step using step_spline_natural encode predictors way. degrees freedom hard-coded produce two additional feature columns per predictor: Binding model recipe workflow creates simple interface fit() predict() data (isn’t required tidypredict). alternate preprocessing method normalize data using spatial sign transformation. projects predictors unit circle can sometimes mitigate effect collinearity outliers. recipe also used. visual representation data transformation: Another workflow created method: tidyposterior require user create models using tidymodels packages, caret, method (although advantages using tools). end data frame format resample identifiers columns performance statistics needed. produce format tidymodels objects, small convenience function create model 90% data allocated cross-validation, predict 10%, calculate area ROC curve. use tidymodels, high-level interfaces (shown ) don’t require function. rsample object cv_folds, let’s create two columns ROC statistics using function conjunction purrr::map dplyr::mutate: suggestion using splines better spatial sign. nice inferential analysis tell us size difference create experimental noise data. tidyposterior uses Bayesian ANOVA model compute posterior distributions performance statistic modeling method. tells use probabilistic distribution model performance metrics allows us make formal statements superiority (equivalence) different models. Tidy Models R good explanation Bayesian ANOVA model works. main function conduct analysis perf_mod(). main argument object containing resampling information least two numeric columns performance statistics (measuring metric). described ?perf_mod, variety object types can used argument. also options statistical parameters analysis, transformation output statistics used . main options analysis passed rstanarm function stan_glmer(). include: seed: integer controls random numbers used Bayesian model. iter: total number Montre Carlo iterations used (including burn-samples). chains: number independent Markov Chain Monte Carlo analyses compute. refresh: often update log (value zero means output). options can helpful (’ll use defaults): prior_intercept: main argument analysis specifying prior distribution parameters. family: exponential family distribution performance statistics. cores: number parallel workers use speed-computations. call function : summary() function type object shows output stan_glmer(). ’s long, show initial output: Assuming assumptions appropriate, one main things ’d like get object samples posterior distributions performance metrics (per modeling method). tidy() method produce data frame samples: require seed value since sample. simple plotting method object :  overlap , , better quantify . compare models, contrast_models() function computes posterior distributions differences performance statistics models. example, posterior look like difference performance two preprocessing methods? default, function computes possible differences (single contrast example). also summary() plot methods: Since difference negative, spline model appears better spatial sign method. summary output quantifies producing simple credible interval difference. probability column also reflects since probability spline ROC scores greater analogous statistics spatial sign model. value 0.5 indicate difference. additional analysis can used. ROPE method, short Region Practical Equivalence, method understanding differences models less subjective way. analysis, specify practical effect size (usually analysis). quantity reflects difference metric considered practically meaning full context problem. example, saw two models difference ROC statistics 0.02, might consider effectually different (beliefs may differ). settled value effect size (units statistic), can compute much difference within region practical equivalence (example, [-0.02, 0.02]). difference mostly within bounds, models might significantly different practically different. Alternatively, differences beyond , different senses. summary plot methods optional arguments called size. summary() function computes probability posterior differences fall inside outside region. plot method shows visually:  analysis, even odds difference models practically important (since pract_equiv near 0.5).","code":"spline_rec <-    recipe(Class ~ ., data = two_class_dat) |>    step_spline_natural(A, B, deg_free = 3)  spline_wflow <-    workflow() |>    add_recipe(spline_rec) |>    add_model(logistic_spec) spatial_sign_rec <-    recipe(Class ~ ., data = two_class_dat) |>    step_normalize(A, B) |>    step_spatialsign(A, B)  spatial_sign_rec |>    prep() |>    bake(new_data = NULL) |>    ggplot(aes(x = A, y = B, col = Class)) +    geom_point(alpha = 0.3, cex = 2) +   coord_fixed() spatial_sign_wflow <-    workflow() |>    add_recipe(spatial_sign_rec) |>    add_model(logistic_spec) compute_roc <- function(split, wflow) {   # Fit the model to 90% of the data   mod <- fit(wflow, data = analysis(split))   # Predict the other 10%   pred <- predict(mod, new_data = assessment(split), type = \"prob\")   # Compute the area under the ROC curve   pred |>      bind_cols(assessment(split)) |>      roc_auc(Class, .pred_Class1) |>      pull(.estimate) } roc_values <-    cv_folds |>    mutate(     spatial_sign = map_dbl(splits, compute_roc, spatial_sign_wflow),     splines      = map_dbl(splits, compute_roc, spline_wflow)   )  roc_values ## #  10-fold cross-validation  ## # A tibble: 10 × 4 ##    splits           id     spatial_sign splines ##    <list>           <chr>         <dbl>   <dbl> ##  1 <split [711/80]> Fold01        0.943   0.946 ##  2 <split [712/79]> Fold02        0.861   0.852 ##  3 <split [712/79]> Fold03        0.819   0.838 ##  4 <split [712/79]> Fold04        0.844   0.873 ##  5 <split [712/79]> Fold05        0.865   0.902 ##  6 <split [712/79]> Fold06        0.868   0.909 ##  7 <split [712/79]> Fold07        0.952   0.934 ##  8 <split [712/79]> Fold08        0.904   0.920 ##  9 <split [712/79]> Fold09        0.765   0.811 ## 10 <split [712/79]> Fold10        0.851   0.889 # Overall ROC statistics per workflow: summarize(   roc_values,   splines = mean(splines),   spatial_sign = mean(spatial_sign) ) ## # A tibble: 1 × 2 ##   splines spatial_sign ##     <dbl>        <dbl> ## 1   0.887        0.867 rset_mod <- perf_mod(roc_values, seed = 2, iter = 5000, chains = 5, refresh = 0) print(summary(rset_mod), digits = 3) ##  ## Model Info: ##  function:     stan_glmer ##  family:       gaussian [identity] ##  formula:      statistic ~ model + (1 | id) ##  algorithm:    sampling ##  sample:       12500 (posterior sample size) ##  priors:       see help('prior_summary') ##  observations: 20 ##  groups:       id (10) ##  ## Estimates: ##                                     mean   sd     10%    50%    90%  ## (Intercept)                        0.867  0.016  0.847  0.867  0.887 ## modelsplines                       0.020  0.009  0.009  0.020  0.031 ## b[(Intercept) id:Fold01]           0.060  0.021  0.033  0.060  0.086 ##  ## <snip> tidy(rset_mod, seed = 3) ## # Posterior samples of performance ## # A tibble: 25,000 × 2 ##    model        posterior ##    <chr>            <dbl> ##  1 spatial_sign     0.850 ##  2 splines          0.869 ##  3 spatial_sign     0.860 ##  4 splines          0.875 ##  5 spatial_sign     0.851 ##  6 splines          0.876 ##  7 spatial_sign     0.851 ##  8 splines          0.877 ##  9 spatial_sign     0.852 ## 10 splines          0.873 ## # ℹ 24,990 more rows autoplot(rset_mod) preproc_diff <- contrast_models(rset_mod, seed = 4) summary(preproc_diff, seed = 5) ## # A tibble: 1 × 9 ##   contrast         probability    mean   lower    upper  size pract_neg ##   <chr>                  <dbl>   <dbl>   <dbl>    <dbl> <dbl>     <dbl> ## 1 spatial_sign vs…      0.0196 -0.0200 -0.0351 -0.00472     0        NA ## # ℹ 2 more variables: pract_equiv <dbl>, pract_pos <dbl> autoplot(preproc_diff) +    xlab(\"Difference in ROC (spatial sign - splines)\") summary(preproc_diff, size = 0.02) |>    select(contrast, starts_with(\"pract\")) ## # A tibble: 1 × 4 ##   contrast                pract_neg pract_equiv pract_pos ##   <chr>                       <dbl>       <dbl>     <dbl> ## 1 spatial_sign vs splines     0.503       0.497   0.00064 autoplot(preproc_diff, size = 0.02)"},{"path":"https://tidyposterior.tidymodels.org/dev/articles/Getting_Started.html","id":"about-our-assumptions","dir":"Articles","previous_headings":"Comparing modeling/prepreocessing methods","what":"About our assumptions","title":"Getting Started","text":"Previously, expression “assuming assumptions appropriate” used. inferential analysis validity assumptions matter great deal. assumptions analysis. main one ’ve specified outcome distribution well. ’ve models area ROC curve. statistic bounded (effectively) 0.5 1.0. variance statistic probably related mean; likely less variation scores near 1.0 near 0.5. default family stan_glmer() Gaussian. Given characteristics metric, assumption might seem problematic. However, Gaussian seems like good first approach assumption. rationale based Central Limit Theorem. sample size increases, sample mean statistic converges normality despite distribution individual data points. performance estimates summary statistics , training set size “large enough”, exhibit behavior consistent normality. simple (approximate) example/diagnostics, suppose used simple ANOVA ROC statistics using lm(). analysis one used tidyposterior, regression parameter estimates fairly similar. analysis, can assess normality residuals see pretty consistent normality assumption:  case things can . easiest approach use variance stabilizing transformation metrics keep Gaussian assumption. perf_mod() transform argument transform outcome still produce posterior distributions original units. help variation within model significantly changes range values. transformed back original units, posteriors different variances. Another option can help heterogeneous variances hetero_var. fits difference variance modeling method. However, may make convergence model difficult. Finally, different distribution can assumed using family argument stan_glmer(). Since metrics numeric, many families choose .","code":"roc_longer <-    roc_values |>    select(-splits) |>    pivot_longer(cols = c(-id), names_to = \"preprocessor\", values_to = \"roc\")  roc_fit <- lm(roc ~ preprocessor, roc_longer)  roc_fit |>    augment() |>    ggplot(aes(sample = .resid)) +    geom_qq() +    geom_qq_line(lty = 2) +   coord_fixed(ratio  = 20)"},{"path":"https://tidyposterior.tidymodels.org/dev/articles/Getting_Started.html","id":"evaluating-sub-models","dir":"Articles","previous_headings":"","what":"Evaluating sub-models","title":"Getting Started","text":"previous example -model comparison (“model” really means statistical model plus preprocessing method). model must tuned, also issue within-model comparisons. spline analysis, assumed three degrees freedom appropriate. However, might tune model parameter see best degrees freedom . previous spline recipe altered degrees freedom parameter doesn’t actual value. Instead, using value tune() mark parameter optimization. different approaches tuning parameter; ’ll use simpe grid search. tune package function tune_grid() used evaluate several values parameter. value, resampled area ROC curve computed. perf_mod() method type object. computations conducted manner , instance, four sub-models compared.  object given perf_mod model tuning function, model column corresponds .config column results. lot overlap. results call question overall utility using splines. single degree freedom model corresponds linear effect. Let’s compare linear class boundaries sub-models see splines even improving model. contrast_model function can take two lists model identifiers compute differences. , tuning objects, include values .config. specification compute difference {1 df - X df} positive differences indicate linear model better.  results indicate lot degrees freedom might make model worse. best, limited difference performance one spline term used. ROPE analysis definitive; sense practical differences within previously used effect size:","code":"spline_rec <-    recipe(Class ~ ., data = two_class_dat) |>    step_ns(A, B, deg_free = tune()) spline_tune <-   logistic_spec |>   tune_grid(     spline_rec,     resamples = cv_folds,     grid = tibble(deg_free = c(1, 3, 5, 10)),     metrics = metric_set(roc_auc),     control = control_grid(save_workflow = TRUE)   ) collect_metrics(spline_tune) |>    arrange(desc(mean)) ## # A tibble: 4 × 7 ##   deg_free .metric .estimator  mean     n std_err .config              ##      <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>                ## 1        1 roc_auc binary     0.888    10  0.0141 Preprocessor1_Model1 ## 2        3 roc_auc binary     0.887    10  0.0137 Preprocessor2_Model1 ## 3        5 roc_auc binary     0.886    10  0.0133 Preprocessor3_Model1 ## 4       10 roc_auc binary     0.883    10  0.0128 Preprocessor4_Model1 grid_mod <- perf_mod(spline_tune, seed = 6, iter = 5000, chains = 5, refresh = 0) autoplot(grid_mod) grid_diff <-   contrast_models(     grid_mod,     list_1 = rep(\"Preprocessor1_Model1\", 3),     list_2 = c(       \"Preprocessor2_Model1\", # <-  3 df spline       \"Preprocessor3_Model1\", # <-  5 df spline       \"Preprocessor4_Model1\"  # <- 10 df spline     ),     seed = 7   ) summary(grid_diff) ## # A tibble: 3 × 9 ##   contrast         probability    mean    lower   upper  size pract_neg ##   <chr>                  <dbl>   <dbl>    <dbl>   <dbl> <dbl>     <dbl> ## 1 Preprocessor1_M…       0.530 3.13e-4 -0.00571 0.00640     0        NA ## 2 Preprocessor1_M…       0.631 1.18e-3 -0.00484 0.00715     0        NA ## 3 Preprocessor1_M…       0.896 4.50e-3 -0.00144 0.0105      0        NA ## # ℹ 2 more variables: pract_equiv <dbl>, pract_pos <dbl> autoplot(grid_diff) autoplot(grid_diff, size = 0.02)"},{"path":"https://tidyposterior.tidymodels.org/dev/articles/Getting_Started.html","id":"workflow-sets","dir":"Articles","previous_headings":"","what":"Workflow sets","title":"Getting Started","text":"Workflow sets collections workflows results. can made existing workflows evaluated using workflow_set() create evaluate models. Let’s create initial set difference combinations two predictors data set. object volumn contains workflows created combinations preprocessors model (multiple models used). Rather calling functions tune package repeatedly, can evaluate single function call. Notice none workflows require tuning tune::fit_resamples() can used: can also add previously tuned spline results first converting workflow set appending rows results: convenience functions take initial look results:  perf_mod() method workflow sets takes best submodel workflow uses standard tidyposterior analysis: results call produces object additional class enable autoplot() methods specific workflow sets. example, default plot shows 90% credible intervals best results workflow:  Alternatively, ROPE estimates given since can computed compare numerically best workflow others. probability practical equivalence shown results:","code":"library(workflowsets)  logistic_set <-    workflow_set(     list(A = Class ~ A, B = Class ~ B, ratio = Class ~ I(log(A/B)),           spatial_sign = spatial_sign_rec),     list(logistic = logistic_spec)   ) logistic_set ## # A workflow set/tibble: 4 × 4 ##   wflow_id              info             option    result     ##   <chr>                 <list>           <list>    <list>     ## 1 A_logistic            <tibble [1 × 4]> <opts[0]> <list [0]> ## 2 B_logistic            <tibble [1 × 4]> <opts[0]> <list [0]> ## 3 ratio_logistic        <tibble [1 × 4]> <opts[0]> <list [0]> ## 4 spatial_sign_logistic <tibble [1 × 4]> <opts[0]> <list [0]> logistic_res <-    logistic_set |>    workflow_map(\"fit_resamples\", seed = 3, resamples = cv_folds,                 metrics = metric_set(roc_auc))  logistic_res ## # A workflow set/tibble: 4 × 4 ##   wflow_id              info             option    result    ##   <chr>                 <list>           <list>    <list>    ## 1 A_logistic            <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 2 B_logistic            <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 3 ratio_logistic        <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 4 spatial_sign_logistic <tibble [1 × 4]> <opts[2]> <rsmp[+]> collect_metrics(logistic_res) |>    filter(.metric == \"roc_auc\") ## # A tibble: 4 × 9 ##   wflow_id .config preproc model .metric .estimator  mean     n std_err ##   <chr>    <chr>   <chr>   <chr> <chr>   <chr>      <dbl> <int>   <dbl> ## 1 A_logis… Prepro… formula logi… roc_auc binary     0.702    10  0.0210 ## 2 B_logis… Prepro… formula logi… roc_auc binary     0.866    10  0.0151 ## 3 ratio_l… Prepro… formula logi… roc_auc binary     0.749    10  0.0164 ## 4 spatial… Prepro… recipe  logi… roc_auc binary     0.867    10  0.0176 logistic_res <-    logistic_res |>    bind_rows(     as_workflow_set(splines = spline_tune)   ) logistic_res ## # A workflow set/tibble: 5 × 4 ##   wflow_id              info             option    result    ##   <chr>                 <list>           <list>    <list>    ## 1 A_logistic            <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 2 B_logistic            <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 3 ratio_logistic        <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 4 spatial_sign_logistic <tibble [1 × 4]> <opts[2]> <rsmp[+]> ## 5 splines               <tibble [1 × 4]> <opts[0]> <tune[+]> rank_results(logistic_res, rank_metric = \"roc_auc\") |>    filter(.metric == \"roc_auc\") ## # A tibble: 8 × 9 ##   wflow_id .config .metric  mean std_err     n preprocessor model  rank ##   <chr>    <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int> ## 1 splines  Prepro… roc_auc 0.888  0.0141    10 recipe       logi…     1 ## 2 splines  Prepro… roc_auc 0.887  0.0137    10 recipe       logi…     2 ## 3 splines  Prepro… roc_auc 0.886  0.0133    10 recipe       logi…     3 ## 4 splines  Prepro… roc_auc 0.883  0.0128    10 recipe       logi…     4 ## 5 spatial… Prepro… roc_auc 0.867  0.0176    10 recipe       logi…     5 ## 6 B_logis… Prepro… roc_auc 0.866  0.0151    10 formula      logi…     6 ## 7 ratio_l… Prepro… roc_auc 0.749  0.0164    10 formula      logi…     7 ## 8 A_logis… Prepro… roc_auc 0.702  0.0210    10 formula      logi…     8 autoplot(logistic_res, metric = \"roc_auc\") roc_mod <- perf_mod(logistic_res, metric = \"roc_auc\", seed = 1, refresh = 0) autoplot(roc_mod) autoplot(roc_mod, type = \"ROPE\", size = 0.025)"},{"path":"https://tidyposterior.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M (2025). tidyposterior: Bayesian Analysis Compare Models using Resampling Statistics. R package version 1.0.2.9000, https://tidyposterior.tidymodels.org.","code":"@Manual{,   title = {tidyposterior: Bayesian Analysis to Compare Models using Resampling Statistics},   author = {Max Kuhn},   year = {2025},   note = {R package version 1.0.2.9000},   url = {https://tidyposterior.tidymodels.org}, }"},{"path":"https://tidyposterior.tidymodels.org/dev/index.html","id":"tidyposterior-","dir":"","previous_headings":"","what":"Bayesian Analysis to Compare Models using Resampling Statistics","title":"Bayesian Analysis to Compare Models using Resampling Statistics","text":"package can used conduct post hoc analyses resampling results generated models. example, two models evaluated root mean squared error (RMSE) using 10-fold cross-validation, 10 paired statistics. can used make comparisons models without involving test set. rich literature analysis model resampling results McLachlan’s Discriminant Analysis Statistical Pattern Recognition references therein. package follows spirit Benavoli et al (2017). tidyposterior uses Bayesian generalized linear models purpose can considered upgraded version caret::resamples() function. package works rsample objects natively results data frame can used. See Chapter 11 Tidy Models R examples details.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Analysis to Compare Models using Resampling Statistics","text":"can install released version tidyposterior CRAN : development version GitHub :","code":"install.packages(\"tidyposterior\") # install.packages(\"pak\") pak::pak(\"tidymodels/tidyposterior\")"},{"path":"https://tidyposterior.tidymodels.org/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Analysis to Compare Models using Resampling Statistics","text":"illustrate, example objects using 10-fold cross-validation simple two-class problem: can define two different models (simplicity, tuning parameters). tidymodels, [tune::fit_resamples()] function can used estimate performance model/resample: , several ways pass results perf_mod() function. general approach data frame resampling labels (.e., one id columns) well columns model like compare. model results , [tune::collect_metrics()] can used along basic data manipulation steps: can give directly perf_mod(): , posterior distributions model can obtained tidy() method:  See contrast_models() analyze distributions","code":"library(tidymodels) #> ── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ── #> ✔ broom        1.0.9.9000     ✔ recipes      1.3.1.9000 #> ✔ dials        1.4.1.9000     ✔ rsample      1.3.1.9000 #> ✔ dplyr        1.1.4.9000     ✔ tibble       3.3.0.9002 #> ✔ ggplot2      3.5.2.9002     ✔ tidyr        1.3.1.9000 #> ✔ infer        1.0.9.9000     ✔ tune         1.3.0.9005 #> ✔ modeldata    1.4.0.9000     ✔ workflows    1.2.0.9000 #> ✔ parsnip      1.3.2.9000     ✔ workflowsets 1.1.1.9000 #> ✔ purrr        1.1.0.9000     ✔ yardstick    1.3.2.9000 #> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── #> ✖ purrr::discard() masks scales::discard() #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ recipes::step()  masks stats::step() library(tidyposterior)  data(two_class_dat, package = \"modeldata\")  set.seed(100) folds <- vfold_cv(two_class_dat) logistic_reg_glm_spec <-   logistic_reg() |>   set_engine('glm')  mars_earth_spec <-   mars(prod_degree = 1) |>   set_engine('earth') |>   set_mode('classification') rs_ctrl <- control_resamples(save_workflow = TRUE)  logistic_reg_glm_res <-    logistic_reg_glm_spec |>    fit_resamples(Class ~ ., resamples = folds, control = rs_ctrl)  mars_earth_res <-    mars_earth_spec |>    fit_resamples(Class ~ ., resamples = folds, control = rs_ctrl) #>  #> Attaching package: 'plotrix' #> The following object is masked from 'package:scales': #>  #>     rescale logistic_roc <-    collect_metrics(logistic_reg_glm_res, summarize = FALSE) |>    dplyr::filter(.metric == \"roc_auc\") |>    dplyr::select(id, logistic = .estimate)  mars_roc <-    collect_metrics(mars_earth_res, summarize = FALSE) |>    dplyr::filter(.metric == \"roc_auc\") |>    dplyr::select(id, mars = .estimate)  resamples_df <- full_join(logistic_roc, mars_roc, by = \"id\") resamples_df #> # A tibble: 10 × 3 #>    id     logistic  mars #>    <chr>     <dbl> <dbl> #>  1 Fold01    0.856 0.845 #>  2 Fold02    0.933 0.951 #>  3 Fold03    0.934 0.937 #>  4 Fold04    0.864 0.858 #>  5 Fold05    0.847 0.854 #>  6 Fold06    0.911 0.840 #>  7 Fold07    0.867 0.858 #>  8 Fold08    0.886 0.876 #>  9 Fold09    0.898 0.898 #> 10 Fold10    0.906 0.894 set.seed(101) roc_model_via_df <- perf_mod(resamples_df, iter = 2000) #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 4.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.46 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.355 seconds (Warm-up) #> Chain 1:                0.121 seconds (Sampling) #> Chain 1:                0.476 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.357 seconds (Warm-up) #> Chain 2:                0.137 seconds (Sampling) #> Chain 2:                0.494 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.1 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.275 seconds (Warm-up) #> Chain 3:                0.146 seconds (Sampling) #> Chain 3:                0.421 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'continuous' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 9e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.09 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.297 seconds (Warm-up) #> Chain 4:                0.112 seconds (Sampling) #> Chain 4:                0.409 seconds (Total) #> Chain 4: roc_model_via_df |>    tidy() |>    ggplot(aes(x = posterior)) +    geom_histogram(bins = 40, col = \"blue\", fill = \"blue\", alpha = .4) +    facet_wrap(~ model, ncol = 1) +    xlab(\"Area Under the ROC Curve\")"},{"path":"https://tidyposterior.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Bayesian Analysis to Compare Models using Resampling Statistics","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","title":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","text":"objects classes posterior perf_mod, autoplot() produces simple plot posterior distributions. workflow set objects, several types plots can produced.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","text":"","code":"# S3 method for class 'posterior' autoplot(object, ...)  # S3 method for class 'perf_mod' autoplot(object, ...)  # S3 method for class 'perf_mod_workflow_set' autoplot(object, type = \"intervals\", prob = 0.9, size = NULL, ...)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","text":"object object produced perf_mod(), tidy.perf_mod(), workflow set computed results. ... Options passed geom_line(stat = \"density\", ...). type value one : \"intervals\" (model rank versus posterior probability using interval estimation), \"posteriors\" (density plots model), \"ROPE\" (practical equivalence probabilities versus workflow rank). prob number p (0 < p < 1) indicating desired probability mass include intervals. size size effective difference units chosen metric. example, 5 percent increase accuracy (size = 0.05) two models might considered \"real\" difference.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","text":"ggplot2::ggplot() object.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the Posterior Distributions of Model Statistics — autoplot.posterior","text":"","code":"data(ex_objects) autoplot(posterior_samples)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","title":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","text":"density created contrast faceted grid.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","text":"","code":"# S3 method for class 'posterior_diff' autoplot(object, size = 0, ...)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","text":"object object produced contrast_models(). size size effective difference. example, 5\\ \"real\" difference. ... Options passed geom_line(stat = \"density\", ...).","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","text":"ggplot2::ggplot() object using geom_density faceted models contrasted (2 contrasts).","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/autoplot.posterior_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the Posterior Distributions of Model Differences — autoplot.posterior_diff","text":"","code":"data(ex_objects) library(ggplot2) autoplot(contrast_samples)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/contrast_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the Difference Between Models — contrast_models","title":"Estimate the Difference Between Models — contrast_models","text":"posterior distributions created perf_mod() can used obtain posterior distribution difference(s) models. One comparisons can computed time.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/contrast_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the Difference Between Models — contrast_models","text":"","code":"contrast_models(x, list_1 = NULL, list_2 = NULL, seed = sample.int(10000, 1))"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/contrast_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the Difference Between Models — contrast_models","text":"x object produced perf_mod(). list_1, list_2 Character vectors equal length specify specific pairwise contrasts. contrast parameterized list_1[] - list_2[]. defaults left NULL, combinations evaluated. seed single integer sampling posterior.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/contrast_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the Difference Between Models — contrast_models","text":"data frame posterior distribution(s) difference(s). object extra class \"posterior_diff\".","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/contrast_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the Difference Between Models — contrast_models","text":"transformation used x created, inverse applied difference computed.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Analysis of Resampling Statistics — perf_mod","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"Bayesian analysis used answer question: \"looking resampling results, differences models 'real?'\" answer , model can created outcome resampling statistics (e.g. accuracy RMSE). values explained model types. , can get parameter estimates model's affect performance make statistical (practical) comparisons models.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"","code":"perf_mod(object, ...)  # S3 method for class 'rset' perf_mod(object, transform = no_trans, hetero_var = FALSE, formula = NULL, ...)  # S3 method for class 'resamples' perf_mod(   object,   transform = no_trans,   hetero_var = FALSE,   metric = object$metrics[1],   ... )  # S3 method for class 'data.frame' perf_mod(object, transform = no_trans, hetero_var = FALSE, formula = NULL, ...)  # S3 method for class 'tune_results' perf_mod(   object,   metric = NULL,   transform = no_trans,   hetero_var = FALSE,   formula = NULL,   filter = NULL,   ... )  # S3 method for class 'workflow_set' perf_mod(   object,   metric = NULL,   transform = no_trans,   hetero_var = FALSE,   formula = NULL,   ... )"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"object Depending context (see Details ): data frame id columns resampling groupds metric results columns.. rset object (rsample::vfold_cv()) containing id column(s) least two numeric columns model performance statistics (e.g. accuracy). object caret::resamples. object class tune_results, produced tune::tune_grid(), tune::tune_bayes() similar. workflow set results contain metric value given metric argument value. ... Additional arguments pass rstanarm::stan_glmer() verbose, prior, seed, refresh, family, etc. transform named list transformation inverse transformation functions. See logit_trans() example. hetero_var logical; TRUE, different variances estimated model group. Otherwise, variance used group. Estimating heterogeneous variances may slow prevent convergence. formula optional model formula use Bayesian hierarchical model (see Details ). metric single character value statistic resamples object analyzed. filter conditional logic statement can used filter statistics generated tune_results using tuning parameter values .config column.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"object class perf_mod. workfkow set given object, extra class \"perf_mod_workflow_set\".","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"functions can used process analyze matched resampling statistics different models using Bayesian generalized linear model effects model resamples.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"bayesian-model-formula","dir":"Reference","previous_headings":"","what":"Bayesian Model formula","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"default, generalized linear model Gaussian error identity link fit data terms predictive model grouping variable. way, performance metrics can compared models. Additionally, random effect terms also used. resampling methods (except repeated V-fold cross-validation), simple random intercept model used exchangeable (.e. compound-symmetric) variance structure. case repeated cross-validation, two random intercept terms used; one repeat another fold within repeat. also exchangeable correlation structures. model specification assumes variance performance metrics across models. However, unlikely true cases. example, simple binomial accuracy, well know variance highest accuracy near 50 percent. argument hetero_var = TRUE, variance structure uses random intercepts model term. may produce realistic posterior distributions may take time converge. Examples default formulas : Custom formulas use statistic outcome variable model factor variable model names. Also, shown package vignettes, Gaussian assumption make unrealistic. case, least two approaches can used. First, outcome statistics can transformed prior fitting model. example, accuracy, logit transformation can used convert outcome values real line model fit data. posterior distributions computed, inverse transformation can used put back original units. transform argument can used . second approach use different error distribution exponential family. RMSE values, Gamma distribution may produce better results expense model computational complexity. can achieved passing family argument perf_mod one might glm function.","code":"# One ID field and common variance:      statistic ~ model + (model | id)     # One ID field and heterogeneous variance:      statistic ~ model + (model + 0 | id)     # Repeated CV (id = repeat, id2 = fold within repeat)    # with a common variance:      statistic ~ model + (model | id2/id)     # Repeated CV (id = repeat, id2 = fold within repeat)    # with a heterogeneous variance:      statistic ~ model + (model + 0| id2/id)     # Default for unknown resampling method and    # multiple ID fields:      statistic ~ model + (model | idN/../id)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"input-formats","dir":"Reference","previous_headings":"","what":"Input formats","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"several ways give resampling results perf_mod() function. illustrate, example objects using 10-fold cross-validation simple two-class problem:   can define two different models (simplicity, tuning parameters).   tidymodels, tune::fit_resamples() function can used estimate performance model/resample:   , several ways pass results perf_mod().","code":"library(tidymodels)    library(tidyposterior)    library(workflowsets)     data(two_class_dat, package = \"modeldata\")     set.seed(100)    folds <- vfold_cv(two_class_dat) logistic_reg_glm_spec <-      logistic_reg() |>      set_engine('glm')     mars_earth_spec <-      mars(prod_degree = 1) |>      set_engine('earth') |>      set_mode('classification') rs_ctrl <- control_resamples(save_workflow = TRUE)     logistic_reg_glm_res <-      logistic_reg_glm_spec |>      fit_resamples(Class ~ ., resamples = folds, control = rs_ctrl)     mars_earth_res <-      mars_earth_spec |>      fit_resamples(Class ~ ., resamples = folds, control = rs_ctrl)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"data-frame-as-input","dir":"Reference","previous_headings":"","what":"Data Frame as Input","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"general approach data frame resampling labels (.e., one id columns) well columns model like compare. model results , tune::collect_metrics() can used along basic data manipulation steps:     can give directly perf_mod():","code":"logistic_roc <-      collect_metrics(logistic_reg_glm_res, summarize = FALSE) |>      dplyr::filter(.metric == \"roc_auc\") |>      dplyr::select(id, logistic = .estimate)     mars_roc <-      collect_metrics(mars_earth_res, summarize = FALSE) |>      dplyr::filter(.metric == \"roc_auc\") |>      dplyr::select(id, mars = .estimate)     resamples_df <- full_join(logistic_roc, mars_roc, by = \"id\")    resamples_df ## # A tibble: 10 x 3    ##   id     logistic  mars    ##   <chr>     <dbl> <dbl>    ## 1 Fold01    0.908 0.875    ## 2 Fold02    0.904 0.917    ## 3 Fold03    0.924 0.938    ## 4 Fold04    0.881 0.881    ## 5 Fold05    0.863 0.864    ## 6 Fold06    0.893 0.889    ## # … with 4 more rows set.seed(101)    roc_model_via_df <- perf_mod(resamples_df, refresh = 0)    tidy(roc_model_via_df) |> summary() ## # A tibble: 2 x 4    ##   model     mean lower upper    ##   <chr>    <dbl> <dbl> <dbl>    ## 1 logistic 0.892 0.879 0.906    ## 2 mars     0.888 0.875 0.902"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"rsample-object-as-input","dir":"Reference","previous_headings":"","what":"rsample Object as Input","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"Alternatively, result columns can merged back original rsample object. -side using method perf_mod() know exactly model formula use Bayesian model:","code":"resamples_rset <-      full_join(folds, logistic_roc, by = \"id\") |>      full_join(mars_roc, by = \"id\")     set.seed(101)    roc_model_via_rset <- perf_mod(resamples_rset, refresh = 0)    tidy(roc_model_via_rset) |> summary() ## # A tibble: 2 x 4    ##   model     mean lower upper    ##   <chr>    <dbl> <dbl> <dbl>    ## 1 logistic 0.892 0.879 0.906    ## 2 mars     0.888 0.875 0.902"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"workflow-set-object-as-input","dir":"Reference","previous_headings":"","what":"Workflow Set Object as Input","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"Finally, tidymodels, workflow set object can used. collection models/preprocessing combinations one object. can emulate workflow set using existing example results pass perf_mod():","code":"example_wset <-      as_workflow_set(logistic = logistic_reg_glm_res, mars = mars_earth_res)     set.seed(101)    roc_model_via_wflowset <- perf_mod(example_wset, refresh = 0)    tidy(roc_model_via_rset) |> summary() ## # A tibble: 2 x 4    ##   model     mean lower upper    ##   <chr>    <dbl> <dbl> <dbl>    ## 1 logistic 0.892 0.879 0.906    ## 2 mars     0.888 0.875 0.902"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"caret-resamples-object","dir":"Reference","previous_headings":"","what":"caret resamples object","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"caret package can also used. equivalent set models created:   Note two models use resamples one another due setting seed prior calling train(). However, different tidymodels results used (final results different). caret resamples() function can collect collate resamples. can also given perf_mod():","code":"library(caret)     set.seed(102)    logistic_caret <- train(Class ~ ., data = two_class_dat, method = \"glm\",                            trControl = trainControl(method = \"cv\"))     set.seed(102)    mars_caret <- train(Class ~ ., data = two_class_dat, method = \"gcvEarth\",                        tuneGrid = data.frame(degree = 1),                        trControl = trainControl(method = \"cv\")) caret_resamples <- resamples(list(logistic = logistic_caret, mars = mars_caret))     set.seed(101)    roc_model_via_caret <- perf_mod(caret_resamples, refresh = 0)    tidy(roc_model_via_caret) |> summary() ## # A tibble: 2 x 4    ##   model     mean lower upper    ##   <chr>    <dbl> <dbl> <dbl>    ## 1 logistic 0.821 0.801 0.842    ## 2 mars     0.822 0.802 0.842"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/perf_mod.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Analysis of Resampling Statistics — perf_mod","text":"Kuhn Silge (2021) Tidy Models R, Chapter 11, https://www.tmwr.org/compare.html","code":""},{"path":[]},{"path":"https://tidyposterior.tidymodels.org/dev/reference/precise_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Sets — precise_example","title":"Example Data Sets — precise_example","text":"Example Data Sets","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/precise_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Data Sets — precise_example","text":"Tibbles additional class rset","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/precise_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Data Sets — precise_example","text":"Several data sets contained package examples. simulates rset object splits columns included save space. precise_example contains results classification analysis real data set using 10-fold CV. holdout data sets contained thousands examples precise performance estimates. Three models fit original data several performance metrics included. noisy_example also generated regression data simulation. original data set small (50 samples) 10-repeated 10-fold CV used four models. excessive variability results (probably resample--resample variability). RMSE distributions show fairly right-skewed distributions. concrete_example contains results regression case study book Applied Predictive Modeling. original data set contained 745 samples training set. 10-repeats 10-fold CV also used 13 models fit data. ts_example data set rolling-origin forecast resampling used. assessment set summary 14 observations (.e. 2 weeks). analysis set consisted base 5,500 samples plus previous assessment sets. Four regression models applied data. ex_object objects generated two_class_dat data modeldata package. Basic 10-fold cross validation used evaluate models. posterior_samples object samples posterior distribution model ROC values contrast_samples posterior probabilities form differences ROC values.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/precise_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data Sets — precise_example","text":"","code":"data(precise_example) precise_example #> #  10-fold cross-validation using stratification  #> # A tibble: 10 × 29 #>    splits id     glm_Accuracy glm_Kappa glm_ROC glm_Sens glm_Spec #>    <lgl>  <chr>         <dbl>     <dbl>   <dbl>    <dbl>    <dbl> #>  1 NA     Fold01        0.722     0.328   0.798    0.729    0.720 #>  2 NA     Fold02        0.696     0.290   0.778    0.720    0.691 #>  3 NA     Fold03        0.701     0.297   0.790    0.723    0.696 #>  4 NA     Fold04        0.704     0.316   0.795    0.763    0.691 #>  5 NA     Fold05        0.721     0.324   0.797    0.722    0.721 #>  6 NA     Fold06        0.711     0.303   0.780    0.706    0.712 #>  7 NA     Fold07        0.702     0.305   0.790    0.739    0.694 #>  8 NA     Fold08        0.718     0.321   0.784    0.729    0.715 #>  9 NA     Fold09        0.720     0.328   0.795    0.739    0.715 #> 10 NA     Fold10        0.719     0.324   0.796    0.728    0.717 #> # ℹ 22 more variables: glm_PRAUC <dbl>, glm_Precision <dbl>, #> #   glm_Recall <dbl>, glm_F <dbl>, knn_Accuracy <dbl>, #> #   knn_Kappa <dbl>, knn_ROC <dbl>, knn_Sens <dbl>, knn_Spec <dbl>, #> #   knn_PRAUC <dbl>, knn_Precision <dbl>, knn_Recall <dbl>, #> #   knn_F <dbl>, nnet_Accuracy <dbl>, nnet_Kappa <dbl>, #> #   nnet_ROC <dbl>, nnet_Sens <dbl>, nnet_Spec <dbl>, #> #   nnet_PRAUC <dbl>, nnet_Precision <dbl>, nnet_Recall <dbl>, …"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics tidy ggplot2 autoplot","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","title":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","text":"Numerical summaries created model including posterior mean upper lower credible intervals (aka uncertainty intervals).","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","text":"","code":"# S3 method for class 'posterior' summary(object, prob = 0.9, seed = sample.int(10000, 1), ...)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","text":"object object produced tidy.perf_mod(). prob number p (0 < p < 1) indicating desired probability mass include intervals. seed single integer sampling posterior. ... currently used","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","text":"data frame summary statistics row model.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the Posterior Distributions of Model Statistics — summary.posterior","text":"","code":"data(\"ex_objects\")  summary(posterior_samples) #> # A tibble: 3 × 4 #>   model         mean lower upper #>   <chr>        <dbl> <dbl> <dbl> #> 1 cart         0.851 0.826 0.875 #> 2 logistic_reg 0.883 0.859 0.909 #> 3 mars         0.884 0.859 0.910"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"Credible intervals created differences. Also, region practical equivalence (ROPE) statistics computed effective size difference given.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"","code":"# S3 method for class 'posterior_diff' summary(object, prob = 0.9, size = 0, ...)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"object object produced contrast_models(). prob number p (0 < p < 1) indicating desired probability mass include intervals. size size effective difference units chosen metric. example, 5 percent increase accuracy (size = 0.05) two models might considered \"real\" difference. ... currently used","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"data frame interval ROPE statistics comparison.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"ROPE estimates included results columns pract_neg, pract_equiv, pract_pos. pract_neg integrates portion posterior -size (pract_pos upper integral starting size). interpretation depends whether metric analyzed better larger smaller. pract_equiv integrates [-size, size]. close one, two models unlikely practically different relative size.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/summary.posterior_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Posterior Distributions of Model Differences — summary.posterior_diff","text":"","code":"data(\"ex_objects\")  summary(contrast_samples) #> # A tibble: 2 × 9 #>   contrast          probability     mean   lower  upper  size pract_neg #>   <chr>                   <dbl>    <dbl>   <dbl>  <dbl> <dbl>     <dbl> #> 1 logistic_reg vs …       1      3.29e-2  0.0196 0.0462     0        NA #> 2 logistic_reg vs …       0.472 -5.40e-4 -0.0142 0.0130     0        NA #> # ℹ 2 more variables: pract_equiv <dbl>, pract_pos <dbl> summary(contrast_samples, size = 0.025) #> # A tibble: 2 × 9 #>   contrast          probability     mean   lower  upper  size pract_neg #>   <chr>                   <dbl>    <dbl>   <dbl>  <dbl> <dbl>     <dbl> #> 1 logistic_reg vs …       1      3.29e-2  0.0196 0.0462 0.025    0      #> 2 logistic_reg vs …       0.472 -5.40e-4 -0.0142 0.0130 0.025    0.0036 #> # ℹ 2 more variables: pract_equiv <dbl>, pract_pos <dbl>"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidy.perf_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Posterior Distributions for Models — tidy.perf_mod","title":"Extract Posterior Distributions for Models — tidy.perf_mod","text":"tidy can used object produced perf_mod() create data frame column model name posterior predictive distribution values.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidy.perf_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Posterior Distributions for Models — tidy.perf_mod","text":"","code":"# S3 method for class 'perf_mod' tidy(x, seed = sample.int(10000, 1), ...)"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidy.perf_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Posterior Distributions for Models — tidy.perf_mod","text":"x object perf_mod() seed single integer sampling posterior. ... currently used","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidy.perf_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Posterior Distributions for Models — tidy.perf_mod","text":"data frame additional class \"posterior\"","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidy.perf_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Posterior Distributions for Models — tidy.perf_mod","text":"Note posterior reflects variability groups (.e. fixed effects). helps answer question model best data set. answer question model best new resample data (greater variability).","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidyposterior-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyposterior: Bayesian Analysis to Compare Models using Resampling Statistics — tidyposterior-package","title":"tidyposterior: Bayesian Analysis to Compare Models using Resampling Statistics — tidyposterior-package","text":"Bayesian analysis used answer question: \"looking resampling results, differences models 'real'?\" answer , model can created performance statistic resampling statistics (e.g. accuracy RMSE). values explained model types. , can get parameter estimates model's affect performance make statistical (practical) comparisons models. methods included similar Benavoli et al (2017) https://jmlr.org/papers/v18/16-305.html.","code":""},{"path":[]},{"path":"https://tidyposterior.tidymodels.org/dev/reference/tidyposterior-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyposterior: Bayesian Analysis to Compare Models using Resampling Statistics — tidyposterior-package","text":"Maintainer: Max Kuhn max@posit.co (ORCID) contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Transformation Functions — no_trans","title":"Simple Transformation Functions — no_trans","text":"set objects contained easily facilitate use outcome transformations modeling. example, large amount variability resampling results Kappa statistics, lies -1 1, assuming normality may produce posterior estimates outside natural bound. One way solve use link function assume prior appropriately bounded. Another approach transform outcome values prior modeling using Gaussian prior reverse-transforming posterior estimates prior visualization summarization. object can help facilitate last approach.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/transformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Transformation Functions — no_trans","text":"","code":"no_trans  logit_trans  Fisher_trans  ln_trans  inv_trans"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/transformations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Transformation Functions — no_trans","text":"object class list length 2. object class list length 2. object class list length 2. object class list length 2. object class list length 2.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/transformations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Transformation Functions — no_trans","text":"logit_trans object useful model performance statistics bounds zero one, accuracy area ROC curve. ln_trans inv_trans can useful statistics right-skewed strictly positive. Fisher_trans originally used correlation statistics can used metrics falling -1 1, Kappa.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/transformations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Transformation Functions — no_trans","text":"","code":"logit_trans$func(.5) #> [1] 0 logit_trans$inv(0) #> [1] 0.5"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/vctrs_methods_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra methods for the posterior class to work with dplyr verbs — vec_restore.posterior","title":"Extra methods for the posterior class to work with dplyr verbs — vec_restore.posterior","text":"Objects class posterior defined tibbles required columns model (character) posterior (numeric). operations objects break rules, -cast basic tibbles.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/vctrs_methods_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extra methods for the posterior class to work with dplyr verbs — vec_restore.posterior","text":"","code":"vec_restore.posterior(x, to, ...)  vec_proxy.posterior(x, ...)  vec_ptype2.posterior.posterior(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.posterior.tbl_df(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.tbl_df.posterior(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.posterior.data.frame(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.data.frame.posterior(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_cast.posterior.posterior(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.posterior.tbl_df(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.tbl_df.posterior(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.posterior.data.frame(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.data.frame.posterior(x, to, ..., x_arg = \"\", to_arg = \"\")"},{"path":"https://tidyposterior.tidymodels.org/dev/reference/vctrs_methods_posterior_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra methods for the posterior_diff class to work with dplyr verbs — vec_restore.posterior_diff","title":"Extra methods for the posterior_diff class to work with dplyr verbs — vec_restore.posterior_diff","text":"Objects class posterior_diff defined tibbles required columns difference (numeric) character columns model_1, model_2, contrast. operations objects break rules, -cast basic tibbles.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/reference/vctrs_methods_posterior_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extra methods for the posterior_diff class to work with dplyr verbs — vec_restore.posterior_diff","text":"","code":"vec_restore.posterior_diff(x, to, ...)  vec_proxy.posterior_diff(x, ...)  vec_ptype2.posterior_diff.posterior_diff(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.posterior_diff.tbl_df(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.tbl_df.posterior_diff(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.posterior_diff.data.frame(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_ptype2.data.frame.posterior_diff(x, y, ..., x_arg = \"\", y_arg = \"\")  vec_cast.posterior_diff.posterior_diff(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.posterior_diff.tbl_df(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.tbl_df.posterior_diff(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.posterior_diff.data.frame(x, to, ..., x_arg = \"\", to_arg = \"\")  vec_cast.data.frame.posterior_diff(x, to, ..., x_arg = \"\", to_arg = \"\")"},{"path":[]},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-102","dir":"Changelog","previous_headings":"","what":"tidyposterior 1.0.2","title":"tidyposterior 1.0.2","text":"Maintenance release upcoming ggplot2 release (#74). Transition magrittr pipe base R pipe.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-101","dir":"Changelog","previous_headings":"","what":"tidyposterior 1.0.1","title":"tidyposterior 1.0.1","text":"CRAN release: 2023-10-11 Maintenance release broken test current R-devel. Maintainer email change.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-100","dir":"Changelog","previous_headings":"","what":"tidyposterior 1.0.0","title":"tidyposterior 1.0.0","text":"CRAN release: 2022-06-23 Transition gather() pivot_longer(). Update testthat 3e.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-010","dir":"Changelog","previous_headings":"","what":"tidyposterior 0.1.0","title":"tidyposterior 0.1.0","text":"CRAN release: 2021-03-25 ggplot() methods now removed factor autoplot() methods. perf_mod() methods added tuning parameter objects tune, finetune, workflowsets. rstanarm version 2.21.1 higher now required due changes APIs. Re-licensed package GPL-2 MIT. copyright holders RStudio employees give consent.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-003","dir":"Changelog","previous_headings":"","what":"tidyposterior 0.0.3","title":"tidyposterior 0.0.3","text":"CRAN release: 2020-06-11 contrast_models() now returns tibble extra column called contrast. plot methods now deprecated removed next version. good can replaced simple ggplot code. optional formula argument added perf_mod.rset() perf_mod.data.frame(). resampling method multiple ID columns, nested data structure assumed (warning). new formula argument can used -ride nesting.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"breaking-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"tidyposterior 0.0.3","text":"Methods compatibility dplyr 1.0.0. newer dplyr version, critical columns posterior posterior_diff objects removed, objects -graded tibble. earlier versions dplyr, object -cast.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-002","dir":"Changelog","previous_headings":"","what":"tidyposterior 0.0.2","title":"tidyposterior 0.0.2","text":"CRAN release: 2018-11-15 small, maintenance release.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"minor-bug-fixes-and-improvements-0-0-2","dir":"Changelog","previous_headings":"","what":"Minor bug fixes and improvements","title":"tidyposterior 0.0.2","text":"Moved broom package generics package get tidy generic. ggplot2 moved Suggests sole tidy method explicitly exported generics man files show method. large RData objects containing examples removed package accessible via link GitHub repo.","code":""},{"path":"https://tidyposterior.tidymodels.org/dev/news/index.html","id":"tidyposterior-001","dir":"Changelog","previous_headings":"","what":"tidyposterior 0.0.1","title":"tidyposterior 0.0.1","text":"CRAN release: 2017-11-14 First CRAN submission","code":""}]
